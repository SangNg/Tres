@using WebMatrix.Data

@{
    //load loadout
    Layout = "~/_Layout.cshtml";
    Page.Title = "Settings";

    //database connection
    string connectionString = @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\Database.mdf;Integrated Security=True";
    string provider = "System.Data.SqlClient";
    Database db = Database.OpenConnectionString(connectionString, provider);

    //Retrieving the url code
    string preUrl = Request.Url.AbsoluteUri;
    string[] link = preUrl.Split('/');
    int code = Convert.ToInt32(link[4]);

    #region Validators
    //check if cookie is still valid
    if (Request.Cookies["LoginCookie"] is null || Request.Cookies["LoginCookie"].Value != "true")
    {
        Response.Redirect("~/default.cshtml");
    }

    //Validation for input
    Validation.Add("room_name", Validator.StringLength(30, 1, "Name has to between 1-30 characters"));
    Validation.Add("round_time", Validator.StringLength(8, 8, "Incorrect format for round time please use hh:mm:ss"));
    Validation.Add("pause_time", Validator.StringLength(8, 8, "Incorrect format for pause time please use hh:mm:ss"));
    Validation.Add("pause_duration", Validator.StringLength(8, 8, "Incorrect format for pause time please use hh:mm:ss"));
    Validation.Add("blind_time", Validator.StringLength(8, 8, "Incorrect format for blind time please use hh:mm:ss"));
    Validation.Add("min_table", Validator.Range(1, 99, "Minimum amount is 2 players per table"));
    Validation.Add("max_table", Validator.Range(3, 10, "Maximum amount of players per table is 10"));
    Validation.Add("start_value", Validator.Range(1, 999999, "The range of the start value is 1 - 9.999.999"));
    Validation.Add("tbl_amount", Validator.Range(1, 99, "Please set a realistic amount of tables"));
    Validation.Add("rebuy", Validator.Range(0, 999, "Rebuy has to be 0 or higher"));
    Validation.Add("chip1", Validator.Range(1, 999999, "Chip 1 has to have a value of at least 1"));
    Validation.Add("chip2", Validator.Range(1, 999999, "Chip 2 has to have a value of at least 1"));
    Validation.Add("chip3", Validator.Range(1, 999999, "Chip 3 has to have a value of at least 1"));
    Validation.Add("chip4", Validator.Range(1, 999999, "Chip 4 has to have a value of at least 1"));
    Validation.Add("chip5", Validator.Range(1, 999999, "Chip 5 has to have a value of at least 1"));
    #endregion

    #region Setting default
    //on first load settings
    string room_name = "";
    TimeSpan round_time = new TimeSpan(00,30,00);
    TimeSpan pause_time = new TimeSpan(00,30,00);
    TimeSpan pause_duration = new TimeSpan(00, 05, 00);
    TimeSpan blind_time = new TimeSpan(00,05,00);
    int min_table = 2;
    int max_table_amount = 8;
    int start_value = 500;
    int table_amount = 3;
    int rebuy = 3;
    int chip_worth1 = 1;
    int chip_worth2 = 2;
    int chip_worth3 = 5;
    int chip_worth4 = 10;
    int chip_worth5 = 25;
    DateTime today = DateTime.Now;
    #endregion

    #region Retrieving from database
    //check for correct roomcode
    // dynamic room = db.QueryValue("SELECT Room_Code FROM Room WHERE Room_Code = @0", code);
    dynamic room = db.QuerySingle("SELECT * FROM Room WHERE Room_Code = @0", code);
    if (room != null && room.Room_Code == code)
    {
        room_name = room.Room_Name;
        round_time = room.Round_Time;
        pause_time = room.Pause_Time;
        pause_duration = room.Pause_Duration;
        blind_time = room.Blind_Time;
        min_table = room.Tbl_Min_Size;
        max_table_amount = room.Tbl_Max_Size;
        start_value = room.Start_Value;
        table_amount = room.Tbl_Amount;
        rebuy = room.Allow_Rebuy;
        chip_worth1 = room.Chip_1_Worth;
        chip_worth2 = room.Chip_2_Worth;
        chip_worth3 = room.Chip_3_Worth;
        chip_worth4 = room.Chip_4_Worth;
        chip_worth5 = room.Chip_5_Worth;
    }
    #endregion

    #region Saving logic
    //updates or adds all the values
    void Save()
    {
        string roomname = Request["Room_Name"];
        var time = Request["round_time"];
        int min_table_size = Convert.ToInt32(Request["min_table"]);
        int max_table_size = Convert.ToInt32(Request["max_table"]);
        int allow_rebuy = Convert.ToInt32(Request["rebuy"]);
        var pause = Request["pause_time"];
        var pauseDuration = Request["pause_duration"];
        var blind = Request["blind_time"];
        int value = Convert.ToInt32(Request["start_value"]);
        int tbl_amount = Convert.ToInt32(Request["tbl_amount"]);
        int chip1 = Convert.ToInt32(Request["chip1"]);
        int chip2 = Convert.ToInt32(Request["chip2"]);
        int chip3 = Convert.ToInt32(Request["chip3"]);
        int chip4 = Convert.ToInt32(Request["chip4"]);
        int chip5 = Convert.ToInt32(Request["chip5"]);
        int started = 0;
        today = DateTime.Now;

        var check = db.QueryValue("SELECT Room_Code FROM Room WHERE Room_Code = @0", code);
        if (check == code)
        {
            db.Execute("UPDATE Room SET Room_Code = @0, Room_Name = @1, Tbl_Min_Size = @2, Started = @3, Chip_1_Worth = @4, Chip_2_Worth = @5, Chip_3_Worth = @6, Chip_4_Worth = @7, Chip_5_Worth = @8, Round_Time = @9, Pause_Time = @10, Blind_Time = @11, Allow_Rebuy = @12, Start_Value = @13, Tbl_Amount = @14, Tbl_Max_Size = @15, Room_Create_Date = @16, Pause_Duration = @17 WHERE Room_Code = @0"
            , code, roomname, min_table_size, started, chip1, chip2, chip3, chip4, chip5, time, pause, blind, allow_rebuy, value, tbl_amount, max_table_size, today, pauseDuration);
        }
        else
        {
            db.Execute("INSERT INTO Room (Room_Code, Room_Name, Tbl_Min_Size, Started, Chip_1_Worth, Chip_2_Worth, Chip_3_Worth, Chip_4_Worth, Chip_5_Worth, Round_Time, Pause_Time, Blind_Time, Allow_Rebuy, Start_Value, Tbl_Amount, Tbl_Max_Size, Room_Create_Date, Pause_Duration)" +
            "VALUES (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17)", code, roomname, min_table_size, started, chip1, chip2, chip3, chip4, chip5, time, pause, blind, allow_rebuy, value, tbl_amount, max_table_size, today, pauseDuration);
        }
    }
    #endregion
    string warning = "";
    string incorrectinputwarning = "";
    //continues to next page
    if (IsPost && Request.UrlReferrer.AbsolutePath == Request.Url.AbsolutePath)
    {
        if (Validation.IsValid())
        {
            if (Request["Proceed"] == "Proceed" || Request["Proceed"] == "Admin Page")
            {
                //Checks for roundtime, pausetime and blindtime so it contains no letters
                //And checks if time has a value of hh:mm:ss by splitting it with ':'
                int check = 0;
                int maxplayers = Convert.ToInt32(Request["max_table"]);
                int minplayers = Convert.ToInt32(Request["min_table"]);
                var prelink = Request["round_time"];
                string[] times = prelink.Split(':');
                int i = 0;

                if(times.Count() > 2 && times.Count() < 4)
                {
                    if (int.TryParse(Convert.ToString(times[0]), out i) == true && int.TryParse(Convert.ToString(times[1]), out i) == true && int.TryParse(Convert.ToString(times[2]), out i) == true)
                    {
                        if (times[0].ToString().Length == 2 && times[1].ToString().Length == 2 && times[2].ToString().Length == 2)
                        {
                            check++;
                        }
                        else
                        {
                            warning = "Not a valid round time, use hh:mm:ss";
                        }
                    }
                    else
                    {
                        warning = "Not a valid round time, use hh:mm:ss";
                    }
                }
                else
                {
                    warning = "Not a valid round time, use hh:mm:ss";
                }


                var blind = Request["blind_time"];
                string[] blinds = prelink.Split(':');
                if (blinds.Count() > 2 && blinds.Count() < 4)
                {
                    if (int.TryParse(Convert.ToString(blinds[0]), out i) == true && int.TryParse(Convert.ToString(blinds[1]), out i) == true && int.TryParse(Convert.ToString(blinds[2]), out i) == true)
                    {
                        if (blinds[0].ToString().Length == 2 && blinds[1].ToString().Length == 2 && blinds[2].ToString().Length == 2)
                        {
                            check++;
                        }
                        else
                        {
                            warning = "Not a valid blind time, use hh:mm:ss";
                        }
                    }
                    else
                    {
                        warning = "Not a valid blind time, use hh:mm:ss";
                    }
                }
                else
                {
                    warning = "Not a valid blind time, use hh:mm:ss";
                }

                var pauze = Request["pause_time"];
                string[] pauzes = prelink.Split(':');
                if (pauzes.Count() > 2 && pauzes.Count() < 4)
                {
                    if (int.TryParse(Convert.ToString(pauzes[0]), out i) == true && int.TryParse(Convert.ToString(pauzes[1]), out i) == true && int.TryParse(Convert.ToString(pauzes[2]), out i) == true)
                    {
                        if (pauzes[0].ToString().Length == 2 && pauzes[1].ToString().Length == 2 && pauzes[2].ToString().Length == 2)
                        {
                            check++;
                        }
                        else
                        {
                            warning = "Not a valid pause time, use hh:mm:ss";
                        }
                    }
                    else
                    {
                        warning = "Not a valid pause time, use hh:mm:ss";
                    }
                }
                else
                {
                    warning = "Not a valid pause time, use hh:mm:ss";
                }

                if (maxplayers <= minplayers)
                {
                    incorrectinputwarning = "You cant set the maximum players lower or the same as minimum players";
                }
                else
                {
                    check++;
                }

                //If all three times are valid (at the time it wil count check + 1) than all settings will be saved and user will be redirected
                if (check >= 4)
                {
                    if (Request.QueryString["t"] == null) {
                        Save();
                        Response.Redirect("~/Blinds.cshtml/" + code);
                    }
                    else
                    {
                        Shuffle shuffle = new Shuffle();
                        shuffle.ShuffleTable(db, code);
                        Response.Redirect("~/PlayingAdmin.cshtml/" + code);
                    }
                }
            }
            else
            {
                Response.Redirect("~/Login.cshtml");
            }
        }
    }
}
    }


<head>
    <style>
        .validation-summary-errors {
            color: red;
            font-weight: bold;
        }
        .error-time {
            color: red;
            font-weight: bold;
        }
        .field-validation-error {
            font-weight: bold;
            color: red;
        }
        .help-block ul {
            list-style-type: none;
        }
    </style>
</head>


<div class="py-5 text-center">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h3>Settings</h3>
                <span class="error-time">
                    @warning
                    @incorrectinputwarning
                </span>
                <span class="help-block">
                    @Html.ValidationSummary()
                </span>
                <form style="display: inline-block" name="Settings" method="post">
                    <div class="form-row">
                        <div class="form-group col-md-6"> <label for="form2">Room name</label> <input type="text" class="form-control" id="form2" placeholder="Room name" name="room_name" value="@room_name" required> </div>
                        <div class="form-group col-md-6"> <label for="form3">Start value</label> <input type="number" step="1" min="1" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form3" placeholder="Start value" name="start_value" value="@start_value" required> </div>

                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6"> <label for="form4">Time per round</label> <input type="text" class="form-control" id="form4" placeholder="9001" name="round_time" value="@round_time" required> </div>
                        <div class="form-group col-md-6"> <label for="form10">Amount of rebuys</label> <input type="number" step="1" min="0" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form10" placeholder="9001" name="rebuy" value="@rebuy" required> </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6"> <label for="form5">Interval between pauses</label> <input type="text" class="form-control" id="form5" placeholder="00:30:00" name="pause_time" value="@pause_time" required> </div>
                        <div class="form-group col-md-6"> <label for="form16">Duration for pauses</label> <input type="text" class="form-control" id="form16" placeholder="00:05:00" name="pause_duration" value="@pause_duration" required> </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6"> <label for="form6">Interval for blinds</label> <input type="text" class="form-control" id="form6" placeholder="9001" name="blind_time" value="@blind_time"> </div>
                        <div class="form-group col-md-6"> <label for="form7">Minimum players per table</label> <input type="number" step="1" min="2" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form7" placeholder="3" name="min_table" value="@min_table" required> </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6"> <label for="form8">Maximum players per table</label> <input type="number" step="1" min="3" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form8" placeholder="9001" name="max_table" value="@max_table_amount" required> </div>
                        <div class="form-group col-md-6"> <label for="form9">Amount of tables</label> <input type="number" step="1" min="1" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form9" placeholder="9001" name="tbl_amount" value="@table_amount" required> </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6"> <label for="form11">Value chip 1</label> <input type="number" step="1" min="1" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form11" placeholder="1" name="chip1" value="@chip_worth1" required> </div>
                        <div class="form-group col-md-6"> <label for="form12">Value chip 2</label> <input type="number" step="1" min="1" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form12" placeholder="5" name="chip2" value="@chip_worth2" required> </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6"> <label for="form13">Value chip 3</label> <input type="number" step="1" min="1" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form13" placeholder="10" name="chip3" value="@chip_worth3" required> </div>
                        <div class="form-group col-md-6"> <label for="form14">Value chip 4</label> <input type="number" step="1" min="1" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form14" placeholder="25" name="chip4" value="@chip_worth4" required> </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6"> <label for="form15">Value chip 5</label> <input type="number" step="1" min="1" max="999999" pattern="[0-9]" inputmode="numeric" class="form-control" id="form15" placeholder="100" name="chip5" value="@chip_worth5" required> </div>
                    </div>
                    @if (Request.QueryString["t"] == null)
                    {
                        <input class="btn btn-primary" type="submit" name="Proceed" value="Proceed" />
                    }
                    else
                    {
                        <input class="btn btn-primary" type="submit" name="Proceed" value="Admin Page" />
                    }


                </form>
            </div>
        </div>
    </div>
</div>
